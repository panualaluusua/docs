// c:\Users\panua\projektit\docs\generate-config.js
const fs = require('fs');
const path = require('path');

const projectRoot = __dirname; // Olettaa, että skripti ajetaan projektin juuresta
const contentDir = path.join(projectRoot, 'content'); // Kansion nimi dokumentaatiolähteille
const outputConfigPath = path.join(projectRoot, 'docusaurus.config.js');

// Varmista, että polut img/favicon.ico, img/logo.svg ja src/css/custom.css ovat olemassa
// tai muokkaa polkuja tarpeen mukaan alla olevassa baseConfigValues-objektissa.
const baseConfigValues = {
  title: 'Dynaamisesti Generoitu Sivusto',
  tagline: 'Dokumentaatiota useista lähteistä',
  url: 'https://example.com', // TODO: Päivitä tähän sivustosi oikea URL
  baseUrl: '/',
  onBrokenLinks: 'warn',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'img/favicon.ico',
  organizationName: 'testuser', // TODO: Päivitä GitHub-organisaatiosi/käyttäjänimesi
  projectName: 'testproject', // TODO: Päivitä GitHub-projektisi nimi
  navbarTitle: 'Pääsivusto',
  navbarLogoAlt: 'Sivuston Logo',
  navbarLogoSrc: 'img/logo.svg',
  footerCopyright: `Copyright ${new Date().getFullYear()} Oma Projekti. Built with Docusaurus.`,
  customCssPath: './src/css/custom.css' // Polku custom CSS-tiedostoon
};

function generateSidebarsFile(instancePath, instanceName) {
  const sidebarFilePath = path.join(instancePath, 'sidebars.js');
  const sidebarKey = `${instanceName.toLowerCase()}Sidebar`; // Esim. minidocsSidebar
  const sidebarContent = `
/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  ${sidebarKey}: [
    {
      type: 'autogenerated',
      dirName: '.', // Autogeneroi tämän dokumentaatioinstanssin juuresta
    },
  ],
};
module.exports = sidebars;
`;
  fs.writeFileSync(sidebarFilePath, sidebarContent.trim());
  console.log(`Luotu/päivitetty sivupalkkitiedosto: ${sidebarFilePath} (avain: ${sidebarKey})`);
  return sidebarFilePath;
}

function discoverDocInstances(contentDir) {
  if (!fs.existsSync(contentDir)) {
    console.warn(`Dokumentaatiokansiota ${contentDir} ei löydy. Ohitetaan dokumentaatioinstanssien haku.`);
    return [];
  }
  const dirents = fs.readdirSync(contentDir, { withFileTypes: true });
  return dirents
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);
}

function generateConfig() {
  const docInstances = discoverDocInstances(contentDir);
  const presetsOptionsList = []; // For additional docs instances
  let mainDocsConfig = false; // For the first/single docs instance

  const navbarItems = [];

  if (docInstances.length > 0) {
    docInstances.forEach((instanceName, index) => {
      const instanceAbsolutePath = path.join(contentDir, instanceName);
      // Paths relative to projectRoot for docusaurus.config.js
      const relativeInstancePath = path.relative(projectRoot, instanceAbsolutePath).replace(/\\/g, '/');
      const routeBasePath = instanceName.toLowerCase();
      
      const sidebarAbsoluteFilePath = generateSidebarsFile(instanceAbsolutePath, instanceName);
      // sidebarPath needs to be relative to docusaurus.config.js, starting with './'
      const relativeSidebarPathForConfig = './' + path.relative(projectRoot, sidebarAbsoluteFilePath).replace(/\\/g, '/');
      const sidebarKey = `${instanceName.toLowerCase()}Sidebar`;

      const docsInstanceConfig = {
        path: relativeInstancePath,
        routeBasePath: routeBasePath,
        sidebarPath: relativeSidebarPathForConfig,
        // Ei eksplisiittisiä versiointiasetuksia tässä
        // You can add more options here, like editUrl, showLastUpdateTime, etc.
      };

      if (index === 0) { // First instance is configured via preset-classic's 'docs' option
        mainDocsConfig = docsInstanceConfig;
      } else { // Subsequent instances are configured via separate plugins
        presetsOptionsList.push([
          '@docusaurus/plugin-content-docs',
          {
            id: instanceName.toLowerCase(), // Unique id for this instance
            ...docsInstanceConfig // Nyt ilman mitään versiointiasetuksia
          },
        ]);
      }

      navbarItems.push({
        type: 'docSidebar',
        sidebarId: sidebarKey,
        docsPluginId: index === 0 ? (docInstances.length > 1 ? 'default' : undefined) : instanceName.toLowerCase(), // 'default' for main if others exist
        position: 'left',
        label: instanceName.charAt(0).toUpperCase() + instanceName.slice(1),
      });
       // If 'default' is used as pluginId for the main docs instance when multiple exist, 
       // Docusaurus might expect the main docs config within presets[0][1].docs to have no id.
       // Or, the main instance is 'docs' (default behavior) and additional instances have IDs.
       // Let's adjust: main instance (index 0) uses default plugin ID ('docs')
       // and other instances get explicit IDs.
        if (index === 0) {
            navbarItems[navbarItems.length -1].docsPluginId = undefined; // Default 'docs' plugin
        } else {
            navbarItems[navbarItems.length -1].docsPluginId = instanceName.toLowerCase();
        }

    });
  }
  
  // If there is only one docs instance, and it's configured as mainDocsConfig,
  // and navbarItems refers to it, its docsPluginId should be undefined or 'docs'.
  if (docInstances.length === 1 && navbarItems.length === 1) {
    navbarItems[0].docsPluginId = undefined;
  }


  const stringifiedMainDocsConfig = mainDocsConfig 
    ? JSON.stringify(mainDocsConfig, null, 2).replace(/"(sidebarPath)": "((?:\\.|[^"\\])*)"/g, (match, key, value) => `"${key}": require.resolve('${value.replace(/'/g, "\\'")}')`)
    : 'false';

  const stringifiedAdditionalPresets = JSON.stringify(
      presetsOptionsList.map(p => {
        if (p[1] && p[1].sidebarPath) {
          const presetOptions = { ...p[1] };
          // Escape % in path itself, then wrap with placeholder
          presetOptions.sidebarPath = `%%SIDEBAR_PATH_PLACEHOLDER_${presetOptions.sidebarPath.replace(/%/g, '%%')}%%`;
          return [p[0], presetOptions];
        }
        return p;
      }),
      null,
      2
    ).replace(/"sidebarPath": "%%SIDEBAR_PATH_PLACEHOLDER_([^%]+(?:%%[^%]+)*)%%"/g, (match, pathValue) => {
      const cleanPath = pathValue.replace(/%%/g, '%'); // Unescape %
      return `"sidebarPath": require.resolve('${cleanPath.replace(/'/g, "\\'")}')`;
    });


  const configContent = `
// HUOM! Tämä tiedosto on automaattisesti generoitu. Älä muokkaa sitä suoraan.
// Muokkaa sen sijaan generate-config.js -skriptiä ja aja se uudelleen.
module.exports = {
  title: '${baseConfigValues.title}',
  tagline: '${baseConfigValues.tagline}',
  url: '${baseConfigValues.url}',
  baseUrl: '${baseConfigValues.baseUrl}',
  onBrokenLinks: '${baseConfigValues.onBrokenLinks}',
  onBrokenMarkdownLinks: '${baseConfigValues.onBrokenMarkdownLinks}',
  favicon: '${baseConfigValues.favicon}',
  organizationName: '${baseConfigValues.organizationName}',
  projectName: '${baseConfigValues.projectName}',

  presets: [
    [
      '@docusaurus/preset-classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: ${stringifiedMainDocsConfig},
        blog: false, // Blogi poistettu käytöstä
        theme: {
          customCss: require.resolve('${baseConfigValues.customCssPath}'),
        },
      }),
    ],
    ...${stringifiedAdditionalPresets}
  ],

  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      navbar: {
        title: '${baseConfigValues.navbarTitle}',
        logo: {
          alt: '${baseConfigValues.navbarLogoAlt}',
          src: '${baseConfigValues.navbarLogoSrc}',
          href: ${docInstances.length > 0 ? `'/${docInstances[0].toLowerCase()}/'` : `'${baseConfigValues.baseUrl}'`},
        },
        items: ${JSON.stringify(navbarItems, null, 2)},
      },
      footer: {
        style: 'dark',
        links: [],
        copyright: \`${baseConfigValues.footerCopyright}\`,
      },
      prism: {
        theme: require('prism-react-renderer').themes.github,
        darkTheme: require('prism-react-renderer').themes.dracula,
      },
    }),
};
`.trim();

  fs.writeFileSync(outputConfigPath, configContent);
  console.log(`Luotu/päivitetty konfiguraatiotiedosto: ${outputConfigPath}`);
}

// Aja generaattori
generateConfig();
console.log('Muista siirtää dokumentaatiokansiot (esim. minidocs) "content"-alikansioon!');
console.log('Varmista myös, että img/favicon.ico, img/logo.svg ja src/css/custom.css ovat olemassa.');
